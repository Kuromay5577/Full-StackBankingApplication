{"ast":null,"code":"var _jsxFileName = \"/Users/mayrogers/Documents/Class/badbank-three-tiers/frontend/src/App.js\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport Parse from \"parse\";\nimport { useParseQuery } from \"@parse/react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const parseQuery = new Parse.Query(\"TestObject\");\n  const {\n    isLive,\n    // Indicates that Parse Live Query is connected\n    isLoading,\n    // Indicates that the initial load is being processed\n    isSyncing,\n    // Indicates that the library is getting the latest data from Parse Server\n    results,\n    // Stores the current results in an array of Parse Objects\n    count,\n    // Stores the current results count\n    error,\n    // Stores any error\n    reload // Function that can be used to reload the data\n  } = useParseQuery(parseQuery,\n  // The Parse Query to be used\n  {\n    enabled: true,\n    // Enables the parse query (default: true)\n    enableLocalDatastore: true,\n    // Enables cache in local datastore (default: true)\n    enableLiveQuery: false // Enables live query for real-time update (default: true)\n  });\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [isLoading && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 21\n    }, this), isLive && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Live!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 18\n    }, this), isSyncing && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Syncing...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 21\n    }, this), results && /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: results.map(result => /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          children: result.get(\"createdAt\")\n        }, result.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: result.get(\"cheatMode\")\n        }, result.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: result.get(\"score\")\n        }, result.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: result.get(\"objectId\")\n        }, result.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: count\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: error.message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: reload,\n      children: \"Reload\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"rEskVUdDrUKhoeAVTgwFuaF6m+E=\", false, function () {\n  return [useParseQuery];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","Parse","useParseQuery","App","parseQuery","Query","isLive","isLoading","isSyncing","results","count","error","reload","enabled","enableLocalDatastore","enableLiveQuery","map","result","get","id","message"],"sources":["/Users/mayrogers/Documents/Class/badbank-three-tiers/frontend/src/App.js"],"sourcesContent":["import React from \"react\";\nimport Parse from \"parse\";\nimport { useParseQuery } from \"@parse/react\";\n\nconst App = () => {\n  const parseQuery = new Parse.Query(\"TestObject\");\n\n  const {\n    isLive, // Indicates that Parse Live Query is connected\n    isLoading, // Indicates that the initial load is being processed\n    isSyncing, // Indicates that the library is getting the latest data from Parse Server\n    results, // Stores the current results in an array of Parse Objects\n    count, // Stores the current results count\n    error, // Stores any error\n    reload, // Function that can be used to reload the data\n  } = useParseQuery(\n    parseQuery, // The Parse Query to be used\n    {\n      enabled: true, // Enables the parse query (default: true)\n      enableLocalDatastore: true, // Enables cache in local datastore (default: true)\n      enableLiveQuery: false, // Enables live query for real-time update (default: true)\n    }\n  );\n\n  return (\n    <div>\n      {isLoading && <p>Loading...</p>}\n      {isLive && <p>Live!</p>}\n      {isSyncing && <p>Syncing...</p>}\n      {results && (\n        <ul>\n          {results.map((result) => (\n            <>\n              <li key={result.id}>{result.get(\"createdAt\")}</li>\n              <li key={result.id}>{result.get(\"cheatMode\")}</li>\n              <li key={result.id}>{result.get(\"score\")}</li>\n              <li key={result.id}>{result.get(\"objectId\")}</li>\n            </>\n          ))}\n        </ul>\n      )}\n      <p>{count}</p>\n      {error && <p>{error.message}</p>}\n      <button onClick={reload}>Reload</button>\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,aAAa,QAAQ,cAAc;AAAC;AAAA;AAE7C,MAAMC,GAAG,GAAG,MAAM;EAAA;EAChB,MAAMC,UAAU,GAAG,IAAIH,KAAK,CAACI,KAAK,CAAC,YAAY,CAAC;EAEhD,MAAM;IACJC,MAAM;IAAE;IACRC,SAAS;IAAE;IACXC,SAAS;IAAE;IACXC,OAAO;IAAE;IACTC,KAAK;IAAE;IACPC,KAAK;IAAE;IACPC,MAAM,CAAE;EACV,CAAC,GAAGV,aAAa,CACfE,UAAU;EAAE;EACZ;IACES,OAAO,EAAE,IAAI;IAAE;IACfC,oBAAoB,EAAE,IAAI;IAAE;IAC5BC,eAAe,EAAE,KAAK,CAAE;EAC1B,CAAC,CACF;;EAED,oBACE;IAAA,WACGR,SAAS,iBAAI;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAiB,EAC9BD,MAAM,iBAAI;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAY,EACtBE,SAAS,iBAAI;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAiB,EAC9BC,OAAO,iBACN;MAAA,UACGA,OAAO,CAACO,GAAG,CAAEC,MAAM,iBAClB;QAAA,wBACE;UAAA,UAAqBA,MAAM,CAACC,GAAG,CAAC,WAAW;QAAC,GAAnCD,MAAM,CAACE,EAAE;UAAA;UAAA;UAAA;QAAA,QAAgC,eAClD;UAAA,UAAqBF,MAAM,CAACC,GAAG,CAAC,WAAW;QAAC,GAAnCD,MAAM,CAACE,EAAE;UAAA;UAAA;UAAA;QAAA,QAAgC,eAClD;UAAA,UAAqBF,MAAM,CAACC,GAAG,CAAC,OAAO;QAAC,GAA/BD,MAAM,CAACE,EAAE;UAAA;UAAA;UAAA;QAAA,QAA4B,eAC9C;UAAA,UAAqBF,MAAM,CAACC,GAAG,CAAC,UAAU;QAAC,GAAlCD,MAAM,CAACE,EAAE;UAAA;UAAA;UAAA;QAAA,QAA+B;MAAA,gBAEpD;IAAC;MAAA;MAAA;MAAA;IAAA,QAEL,eACD;MAAA,UAAIT;IAAK;MAAA;MAAA;MAAA;IAAA,QAAK,EACbC,KAAK,iBAAI;MAAA,UAAIA,KAAK,CAACS;IAAO;MAAA;MAAA;MAAA;IAAA,QAAK,eAChC;MAAQ,OAAO,EAAER,MAAO;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAgB;EAAA;IAAA;IAAA;IAAA;EAAA,QACpC;AAEV,CAAC;AAAC,GA1CIT,GAAG;EAAA,QAWHD,aAAa;AAAA;AAAA,KAXbC,GAAG;AA4CT,eAAeA,GAAG;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}